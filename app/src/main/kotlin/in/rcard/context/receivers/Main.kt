/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package `in`.rcard.context.receivers

import `in`.rcard.context.receivers.domain.Company
import `in`.rcard.context.receivers.domain.Job
import `in`.rcard.context.receivers.domain.JobId
import `in`.rcard.context.receivers.domain.Role
import `in`.rcard.context.receivers.domain.Salary
import java.util.logging.Level

suspend fun main() {
    val jobs = FixedJobs()
    val jobController = JobController(jobs)
    with(jobJsonable) {
        with(ConsoleLogger()) {
            println(jobController.findJobById("1"))
        }
    }
}

class JobController(private val jobs: Jobs) {

    context (Jsonable<Job>, Logger)
    suspend fun findJobById(id: String): String {
        log(Level.INFO, "Searching job with id $id")
        val jobId = JobId(id.toLong())
        return jobs.findById(jobId)?.let {
            log(Level.INFO, "Job with id $id found")
            return it.toJson()
        } ?: "No job found with id $id"
    }
}

interface Jobs {
    suspend fun findById(id: JobId): Job?
}

class FixedJobs : Jobs {
    override suspend fun findById(id: JobId): Job {
        return Job(
            JobId(1),
            Company("Apple, Inc."),
            Role("Software Engineer"),
            Salary(70_000.00),
        )
    }
}

interface Jsonable<T> {
    fun T.toJson(): String
}

val jobJsonable = object : Jsonable<Job> {
    override fun Job.toJson(): String {
        return """
            {
                "id": ${id.value},
                "company": "${company.name}",
                "role": "${role.name}",
                "salary": $salary.value}
            }
        """.trimIndent()
    }
}

interface Logger {
    fun log(level: Level, message: String)
}

class ConsoleLogger : Logger {
    override fun log(level: Level, message: String) {
        println("$level: $message")
    }
}
